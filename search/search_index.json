{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SELAMAT DATANG! :) \u00b6 halaman tugas Komputasi Numerik Andreana Triwinata Jurusan Teknik Informatika NIM: 180411100127","title":"beranda"},{"location":"#selamat-datang","text":"halaman tugas Komputasi Numerik Andreana Triwinata Jurusan Teknik Informatika NIM: 180411100127","title":"SELAMAT DATANG! :)"},{"location":"McLaurin/","text":"DERET MCLAURIN Merupakan Suatu fungsi f(x) yang memiliki turunan , , , dan seterusnya yang kontinyu dalam interval dengan maka untuk disekitar yaitu , dapat diekspansi kedalam Deret Taylor. Dalam kasus khusus jika a = 0 , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi : \u200b $$ f(x) = f(0) + f'(0)x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 + ... + \\frac{f n(0)}{n!}x n $$ Atau bisa dinyatakan dengan: Deret MacLaurin sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang sudah dihitung secara manual seperti nilai sin x, cos x , eksponensial, dll. Tentu kita tidak akan bisa menghitung nilai-nilai fungsi tersebut tanpa menggunakan bantuan kalkulator atau tabel. Dalam tulisan ini saya akan mencoba untuk mendekati fungsi-fungsi tersebut menggunakan Deret MacLaurin. Tugas \u00b6 Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001. Penyelesaian \u00b6 Fungsi awal exponen : $$ f(x) = e^2x $$ Dapat juga didefinisikan dengan rumus: Tabel perhitungan untuk turunan exponensial : Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x) = f(0) + \\frac{f'(0)}{1!}x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 + \\frac{f''''(0)}{4!}x^4 + ... $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x) = 1 + \\frac{2}{1!}x + \\frac{4}{2!}x^2 + \\frac{8}{3!}x^3 + \\frac{16}{4!}x^4 + ... $$ kemudian, nilai x diganti dengan 4: $$ f(x) = 1 + \\frac{2}{1!}4 + \\frac{4}{2!}4^2 + \\frac{8}{3!}4^3 + \\frac{16}{4!}4^4 + ... $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001 LISTING PROGRAM import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) OUTPUT: f ke - 0 = Ea = 1.0 f ke - 1 = Ea = 8.0 f ke - 2 = Ea = 32.0 f ke - 3 = Ea = 85.33333333333333 f ke - 4 = Ea = 170.66666666666669 f ke - 5 = Ea = 273.0666666666666 f ke - 6 = Ea = 364.08888888888896 f ke - 7 = Ea = 416.1015873015872 f ke - 8 = Ea = 416.1015873015872 f ke - 9 = Ea = 369.8680776014112 f ke - 10 = Ea = 295.89446208112895 f ke - 11 = Ea = 215.195972422639 f ke - 12 = Ea = 143.46398161509296 f ke - 13 = Ea = 88.28552714774924 f ke - 14 = Ea = 50.448872655856576 f ke - 15 = Ea = 26.90606541645684 f ke - 16 = Ea = 13.45303270822842 f ke - 17 = Ea = 6.330838921519444 f ke - 18 = Ea = 2.8137061873417224 f ke - 19 = Ea = 1.184718394670199 f ke - 20 = Ea = 0.47388735786807956 f ke - 21 = Ea = 0.18052851728316455 f ke - 22 = Ea = 0.06564673355751438 f ke - 23 = Ea = 0.022833646454728296 f ke - 24 = Ea = 0.0076112154847578495 f ke - 25 = Ea = 0.0024355889549951826 f ke - 26 = Ea = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$'.'$$']]} }) <script type=\"text/javascript\" async src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">","title":"Tugas1"},{"location":"McLaurin/#tugas","text":"Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001.","title":"Tugas"},{"location":"McLaurin/#penyelesaian","text":"Fungsi awal exponen : $$ f(x) = e^2x $$ Dapat juga didefinisikan dengan rumus: Tabel perhitungan untuk turunan exponensial : Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x) = f(0) + \\frac{f'(0)}{1!}x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 + \\frac{f''''(0)}{4!}x^4 + ... $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x) = 1 + \\frac{2}{1!}x + \\frac{4}{2!}x^2 + \\frac{8}{3!}x^3 + \\frac{16}{4!}x^4 + ... $$ kemudian, nilai x diganti dengan 4: $$ f(x) = 1 + \\frac{2}{1!}4 + \\frac{4}{2!}4^2 + \\frac{8}{3!}4^3 + \\frac{16}{4!}4^4 + ... $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001 LISTING PROGRAM import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) OUTPUT: f ke - 0 = Ea = 1.0 f ke - 1 = Ea = 8.0 f ke - 2 = Ea = 32.0 f ke - 3 = Ea = 85.33333333333333 f ke - 4 = Ea = 170.66666666666669 f ke - 5 = Ea = 273.0666666666666 f ke - 6 = Ea = 364.08888888888896 f ke - 7 = Ea = 416.1015873015872 f ke - 8 = Ea = 416.1015873015872 f ke - 9 = Ea = 369.8680776014112 f ke - 10 = Ea = 295.89446208112895 f ke - 11 = Ea = 215.195972422639 f ke - 12 = Ea = 143.46398161509296 f ke - 13 = Ea = 88.28552714774924 f ke - 14 = Ea = 50.448872655856576 f ke - 15 = Ea = 26.90606541645684 f ke - 16 = Ea = 13.45303270822842 f ke - 17 = Ea = 6.330838921519444 f ke - 18 = Ea = 2.8137061873417224 f ke - 19 = Ea = 1.184718394670199 f ke - 20 = Ea = 0.47388735786807956 f ke - 21 = Ea = 0.18052851728316455 f ke - 22 = Ea = 0.06564673355751438 f ke - 23 = Ea = 0.022833646454728296 f ke - 24 = Ea = 0.0076112154847578495 f ke - 25 = Ea = 0.0024355889549951826 f ke - 26 = Ea = 0.0007494119863622473 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$'.'$$']]} }) <script type=\"text/javascript\" async src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">","title":"Penyelesaian"},{"location":"NewtonRhapson/","text":"\u200b Metode Newton-Raphson Dengan Python Newton-Raphson merupakan metode yang memanfaatkan turunan dan akar awal dari persamaan untuk mencari akar dari persamaan non linier.Untuk rumus Newton-Raphson sendiri adalah Keterangan : xn = akar ke n xn-1 = akar ke n-1 f(xn-1) = fungsi persamaan dari akar ke n-1 f'(xn-1) = fungsi turunan persamaan dari akar ke n-1 Menyusun Algoritma dan Pemrograman Newton Rhapson \u00b6 dari rumus yang kita dapat kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut : Listing Program \u00b6 import math def f ( x ): function = ( x * x * x ) - ( 2 * x ) - 1 return function def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) def iterate ( p , n ): x = p for i in range ( n ): x = newton_raphson ( x ) print ( x ) return ( \"\" ) print ( iterate ( 1 , 10 )) Output sebagai berikut : 2.999994000093219 2.199996832027392 1.780829491896542 1.6363030634057565 1.618304588651506 1.6180340496697716 1.6180339887499486 1.6180339887498947 1.6180339887498947 1.6180339887498947","title":"Tugas2"},{"location":"NewtonRhapson/#menyusun-algoritma-dan-pemrograman-newton-rhapson","text":"dari rumus yang kita dapat kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut :","title":"Menyusun Algoritma dan Pemrograman Newton Rhapson"},{"location":"NewtonRhapson/#listing-program","text":"import math def f ( x ): function = ( x * x * x ) - ( 2 * x ) - 1 return function def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) def iterate ( p , n ): x = p for i in range ( n ): x = newton_raphson ( x ) print ( x ) return ( \"\" ) print ( iterate ( 1 , 10 )) Output sebagai berikut : 2.999994000093219 2.199996832027392 1.780829491896542 1.6363030634057565 1.618304588651506 1.6180340496697716 1.6180339887499486 1.6180339887498947 1.6180339887498947 1.6180339887498947","title":"Listing Program"},{"location":"Pemrograman%20Newton%20Rhapson/","text":"\u200b Metode Newton-Raphson Dengan Python Newton-Raphson merupakan metode yang memanfaatkan turunan dan akar awal dari persamaan untuk mencari akar dari persamaan non linier.Untuk rumus Newton-Raphson sendiri adalah Keterangan : xn = akar ke n xn-1 = akar ke n-1 f(xn-1) = fungsi persamaan dari akar ke n-1 f'(xn-1) = fungsi turunan persamaan dari akar ke n-1 Menyusun Algoritma dan Pemrograman Newton Rhapson \u00b6 dari rumus yang kita dapat kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut : Listing Program \u00b6 import math def f ( x ): function = ( x * x * x ) - ( 2 * x ) - 1 return function def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) def iterate ( p , n ): x = p for i in range ( n ): x = newton_raphson ( x ) print ( x ) return ( \"\" ) print ( iterate ( 1 , 10 )) Output sebagai berikut : 2.999994000093219 2.199996832027392 1.780829491896542 1.6363030634057565 1.618304588651506 1.6180340496697716 1.6180339887499486 1.6180339887498947 1.6180339887498947 1.6180339887498947","title":"Pemrograman Newton Rhapson"},{"location":"Pemrograman%20Newton%20Rhapson/#menyusun-algoritma-dan-pemrograman-newton-rhapson","text":"dari rumus yang kita dapat kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 sebagai berikut :","title":"Menyusun Algoritma dan Pemrograman Newton Rhapson"},{"location":"Pemrograman%20Newton%20Rhapson/#listing-program","text":"import math def f ( x ): function = ( x * x * x ) - ( 2 * x ) - 1 return function def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) def iterate ( p , n ): x = p for i in range ( n ): x = newton_raphson ( x ) print ( x ) return ( \"\" ) print ( iterate ( 1 , 10 )) Output sebagai berikut : 2.999994000093219 2.199996832027392 1.780829491896542 1.6363030634057565 1.618304588651506 1.6180340496697716 1.6180339887499486 1.6180339887498947 1.6180339887498947 1.6180339887498947","title":"Listing Program"},{"location":"RecrusiveTrapezoid/","text":"INTEGRASI NUMERIK \u00b6 Metode Integrasi Numerik adalah salah satu cara untuk menghitung aproksimasi luas daerah di bawah fungsi yang dimaksud pada selang yang diberikan. Ada beberapa metode integrasi numerik yang lazim digunakan, diantaranya yaitu: Metode Euler Eksplisit Metode Euler Implisit pada metode integrasi implisit nilai aktual Xk juga digunakan sebagai umpan balik. Umpan balik ini dapat menyebabkan terjadinya lingkaran aljabar. untuk menghindarinya maka bentuk persamaan diubah menjadi seperti ini. METODE TRAPEZOID Aturan Trapezoid adalah suatu metode pendekatan integral numerik dengan polinomade satu. Metode trapezoid ini dapat diturunkan dengan substitusi fungsi Lagrange orde-1 sebagai f(x) yaitu: dengan demikian dapat dirumuskan: Dimana R adalah suku yang mengandung error komputasi O(h3). Sehingga kita mendapatkan rumus integral trapezoid yaitu: Dalam matematika , dan lebih khusus lagi dalam analisis numerik, aturan trapesium (juga dikenal sebagai Trapezoid Rule ) adalah teknik untuk mendekati integral yang pasti. Estimasi berdasarkan 1 Interval \u00b6 Algoritma Integral Trapezoida \u00b6 Definisikan y = f(x) Tentukan batas bawah (a) dan batas atas (b) integrasi Tentukan jumlah pembagi n Hitung h = (b-a)/2 Hitung Listing Program #definisi fungsi def fungsi ( x ): y = 1 / ( 1 + x ) return y print ( \"fungsi yang digunakan adalah\" ) print ( \"\" ) print ( \" \\t\\t \" , \"f(x) = 1/(1+x)\" ) print ( \"\" ) a = float ( input ( \"masukkan batas bawah integral : \" )) b = float ( input ( \"masukkan batas atas integral : \" )) c = int ( input ( \"masukkan n : \" )) eror = [] print ( \"\" ) print ( \"----------------Hasil Integrasi-----------------\" ) print ( \"iterasi\" , \" \\t \" , \"n\" , \" \\t\\t \" , \"Trapezoid\" ) for iterasi in range ( 0 , c ): n = 2 ** iterasi h = ( b - a ) / n xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) trap = (( h ) * ( fungsi ( a ) + ( 2 * y ) + fungsi ( b ))) / 2 eror . append ( trap ) print ( iterasi + 1 , \" \\t\\t \" , n , \" \\t\\t \" , trap ) print ( eror [ iterasi - 1 ]) print ( eror [ iterasi ]) hasil = ( eror [ iterasi - 1 ] - eror [ iterasi ]) print ( hasil ) print ( \"estimasi error : \" + str ( hasil )) \u200b Running fungsi yang digunakan adalah f ( x ) = 1 / ( 1 + x ) masukkan batas bawah integral : 18 masukkan batas atas integral : 2 masukkan n : 10 ---------------- Hasil Integrasi ----------------- iterasi n Trapezoid 1 1 - 3.087719298245614 2 2 - 2.271132376395534 3 4 - 1.9736614262930052 4 8 - 1.880546148038408 5 16 - 1.854757201003331 6 32 - 1.8480774518918412 7 64 - 1.846390566377457 8 128 - 1.8459677344642065 9 256 - 1.8458619561915175 10 512 - 1.8458355072157113 - 1.8458619561915175 - 1.8458355072157113 - 2.644897580617034e-05 estimasi error : - 2.644897580617034e-05 \u200b \u200b","title":"Tugas3"},{"location":"RecrusiveTrapezoid/#integrasi-numerik","text":"Metode Integrasi Numerik adalah salah satu cara untuk menghitung aproksimasi luas daerah di bawah fungsi yang dimaksud pada selang yang diberikan. Ada beberapa metode integrasi numerik yang lazim digunakan, diantaranya yaitu: Metode Euler Eksplisit Metode Euler Implisit pada metode integrasi implisit nilai aktual Xk juga digunakan sebagai umpan balik. Umpan balik ini dapat menyebabkan terjadinya lingkaran aljabar. untuk menghindarinya maka bentuk persamaan diubah menjadi seperti ini. METODE TRAPEZOID Aturan Trapezoid adalah suatu metode pendekatan integral numerik dengan polinomade satu. Metode trapezoid ini dapat diturunkan dengan substitusi fungsi Lagrange orde-1 sebagai f(x) yaitu: dengan demikian dapat dirumuskan: Dimana R adalah suku yang mengandung error komputasi O(h3). Sehingga kita mendapatkan rumus integral trapezoid yaitu: Dalam matematika , dan lebih khusus lagi dalam analisis numerik, aturan trapesium (juga dikenal sebagai Trapezoid Rule ) adalah teknik untuk mendekati integral yang pasti.","title":"INTEGRASI NUMERIK"},{"location":"RecrusiveTrapezoid/#estimasi-berdasarkan-1-interval","text":"","title":"Estimasi berdasarkan 1 Interval"},{"location":"RecrusiveTrapezoid/#algoritma-integral-trapezoida","text":"Definisikan y = f(x) Tentukan batas bawah (a) dan batas atas (b) integrasi Tentukan jumlah pembagi n Hitung h = (b-a)/2 Hitung Listing Program #definisi fungsi def fungsi ( x ): y = 1 / ( 1 + x ) return y print ( \"fungsi yang digunakan adalah\" ) print ( \"\" ) print ( \" \\t\\t \" , \"f(x) = 1/(1+x)\" ) print ( \"\" ) a = float ( input ( \"masukkan batas bawah integral : \" )) b = float ( input ( \"masukkan batas atas integral : \" )) c = int ( input ( \"masukkan n : \" )) eror = [] print ( \"\" ) print ( \"----------------Hasil Integrasi-----------------\" ) print ( \"iterasi\" , \" \\t \" , \"n\" , \" \\t\\t \" , \"Trapezoid\" ) for iterasi in range ( 0 , c ): n = 2 ** iterasi h = ( b - a ) / n xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) trap = (( h ) * ( fungsi ( a ) + ( 2 * y ) + fungsi ( b ))) / 2 eror . append ( trap ) print ( iterasi + 1 , \" \\t\\t \" , n , \" \\t\\t \" , trap ) print ( eror [ iterasi - 1 ]) print ( eror [ iterasi ]) hasil = ( eror [ iterasi - 1 ] - eror [ iterasi ]) print ( hasil ) print ( \"estimasi error : \" + str ( hasil )) \u200b Running fungsi yang digunakan adalah f ( x ) = 1 / ( 1 + x ) masukkan batas bawah integral : 18 masukkan batas atas integral : 2 masukkan n : 10 ---------------- Hasil Integrasi ----------------- iterasi n Trapezoid 1 1 - 3.087719298245614 2 2 - 2.271132376395534 3 4 - 1.9736614262930052 4 8 - 1.880546148038408 5 16 - 1.854757201003331 6 32 - 1.8480774518918412 7 64 - 1.846390566377457 8 128 - 1.8459677344642065 9 256 - 1.8458619561915175 10 512 - 1.8458355072157113 - 1.8458619561915175 - 1.8458355072157113 - 2.644897580617034e-05 estimasi error : - 2.644897580617034e-05 \u200b \u200b","title":"Algoritma Integral Trapezoida"}]}